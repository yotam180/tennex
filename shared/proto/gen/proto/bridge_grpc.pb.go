// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/bridge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BridgeService_PublishInbound_FullMethodName      = "/tennex.bridge.v1.BridgeService/PublishInbound"
	BridgeService_SendMessage_FullMethodName         = "/tennex.bridge.v1.BridgeService/SendMessage"
	BridgeService_GetQRCode_FullMethodName           = "/tennex.bridge.v1.BridgeService/GetQRCode"
	BridgeService_UpdateAccountStatus_FullMethodName = "/tennex.bridge.v1.BridgeService/UpdateAccountStatus"
)

// BridgeServiceClient is the client API for BridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bridge service handles communication between WhatsApp bridge and backend
type BridgeServiceClient interface {
	// Publish an inbound event from WhatsApp to the backend
	PublishInbound(ctx context.Context, in *PublishInboundRequest, opts ...grpc.CallOption) (*PublishInboundResponse, error)
	// Send a message through WhatsApp
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Get QR code for WhatsApp pairing
	GetQRCode(ctx context.Context, in *GetQRCodeRequest, opts ...grpc.CallOption) (*GetQRCodeResponse, error)
	// Update account status
	UpdateAccountStatus(ctx context.Context, in *UpdateAccountStatusRequest, opts ...grpc.CallOption) (*UpdateAccountStatusResponse, error)
}

type bridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeServiceClient(cc grpc.ClientConnInterface) BridgeServiceClient {
	return &bridgeServiceClient{cc}
}

func (c *bridgeServiceClient) PublishInbound(ctx context.Context, in *PublishInboundRequest, opts ...grpc.CallOption) (*PublishInboundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishInboundResponse)
	err := c.cc.Invoke(ctx, BridgeService_PublishInbound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, BridgeService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeServiceClient) GetQRCode(ctx context.Context, in *GetQRCodeRequest, opts ...grpc.CallOption) (*GetQRCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQRCodeResponse)
	err := c.cc.Invoke(ctx, BridgeService_GetQRCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeServiceClient) UpdateAccountStatus(ctx context.Context, in *UpdateAccountStatusRequest, opts ...grpc.CallOption) (*UpdateAccountStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountStatusResponse)
	err := c.cc.Invoke(ctx, BridgeService_UpdateAccountStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServiceServer is the server API for BridgeService service.
// All implementations must embed UnimplementedBridgeServiceServer
// for forward compatibility.
//
// Bridge service handles communication between WhatsApp bridge and backend
type BridgeServiceServer interface {
	// Publish an inbound event from WhatsApp to the backend
	PublishInbound(context.Context, *PublishInboundRequest) (*PublishInboundResponse, error)
	// Send a message through WhatsApp
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Get QR code for WhatsApp pairing
	GetQRCode(context.Context, *GetQRCodeRequest) (*GetQRCodeResponse, error)
	// Update account status
	UpdateAccountStatus(context.Context, *UpdateAccountStatusRequest) (*UpdateAccountStatusResponse, error)
	mustEmbedUnimplementedBridgeServiceServer()
}

// UnimplementedBridgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBridgeServiceServer struct{}

func (UnimplementedBridgeServiceServer) PublishInbound(context.Context, *PublishInboundRequest) (*PublishInboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishInbound not implemented")
}
func (UnimplementedBridgeServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedBridgeServiceServer) GetQRCode(context.Context, *GetQRCodeRequest) (*GetQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQRCode not implemented")
}
func (UnimplementedBridgeServiceServer) UpdateAccountStatus(context.Context, *UpdateAccountStatusRequest) (*UpdateAccountStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountStatus not implemented")
}
func (UnimplementedBridgeServiceServer) mustEmbedUnimplementedBridgeServiceServer() {}
func (UnimplementedBridgeServiceServer) testEmbeddedByValue()                       {}

// UnsafeBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServiceServer will
// result in compilation errors.
type UnsafeBridgeServiceServer interface {
	mustEmbedUnimplementedBridgeServiceServer()
}

func RegisterBridgeServiceServer(s grpc.ServiceRegistrar, srv BridgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBridgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BridgeService_ServiceDesc, srv)
}

func _BridgeService_PublishInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishInboundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).PublishInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeService_PublishInbound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).PublishInbound(ctx, req.(*PublishInboundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeService_GetQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).GetQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeService_GetQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).GetQRCode(ctx, req.(*GetQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeService_UpdateAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).UpdateAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeService_UpdateAccountStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).UpdateAccountStatus(ctx, req.(*UpdateAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgeService_ServiceDesc is the grpc.ServiceDesc for BridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tennex.bridge.v1.BridgeService",
	HandlerType: (*BridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishInbound",
			Handler:    _BridgeService_PublishInbound_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _BridgeService_SendMessage_Handler,
		},
		{
			MethodName: "GetQRCode",
			Handler:    _BridgeService_GetQRCode_Handler,
		},
		{
			MethodName: "UpdateAccountStatus",
			Handler:    _BridgeService_UpdateAccountStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bridge.proto",
}
