// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/integration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegrationService_UpdateConnectionStatus_FullMethodName  = "/tennex.integration.v1.IntegrationService/UpdateConnectionStatus"
	IntegrationService_SyncConversations_FullMethodName       = "/tennex.integration.v1.IntegrationService/SyncConversations"
	IntegrationService_SyncContacts_FullMethodName            = "/tennex.integration.v1.IntegrationService/SyncContacts"
	IntegrationService_SyncMessages_FullMethodName            = "/tennex.integration.v1.IntegrationService/SyncMessages"
	IntegrationService_ProcessMessage_FullMethodName          = "/tennex.integration.v1.IntegrationService/ProcessMessage"
	IntegrationService_UpdateConversationState_FullMethodName = "/tennex.integration.v1.IntegrationService/UpdateConversationState"
	IntegrationService_CreateUserIntegration_FullMethodName   = "/tennex.integration.v1.IntegrationService/CreateUserIntegration"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Integration service handles platform-agnostic messaging integration
type IntegrationServiceClient interface {
	// Connection Management
	UpdateConnectionStatus(ctx context.Context, in *UpdateConnectionStatusRequest, opts ...grpc.CallOption) (*UpdateConnectionStatusResponse, error)
	// Bulk Synchronization (with streaming for large datasets)
	SyncConversations(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncConversationsRequest, SyncConversationsResponse], error)
	SyncContacts(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncContactsRequest, SyncContactsResponse], error)
	SyncMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncMessagesRequest, SyncMessagesResponse], error)
	// Real-time Events
	ProcessMessage(ctx context.Context, in *ProcessMessageRequest, opts ...grpc.CallOption) (*ProcessMessageResponse, error)
	UpdateConversationState(ctx context.Context, in *UpdateConversationStateRequest, opts ...grpc.CallOption) (*UpdateConversationStateResponse, error)
	// Integration Management
	CreateUserIntegration(ctx context.Context, in *CreateUserIntegrationRequest, opts ...grpc.CallOption) (*CreateUserIntegrationResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) UpdateConnectionStatus(ctx context.Context, in *UpdateConnectionStatusRequest, opts ...grpc.CallOption) (*UpdateConnectionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnectionStatusResponse)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateConnectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) SyncConversations(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncConversationsRequest, SyncConversationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[0], IntegrationService_SyncConversations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncConversationsRequest, SyncConversationsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncConversationsClient = grpc.ClientStreamingClient[SyncConversationsRequest, SyncConversationsResponse]

func (c *integrationServiceClient) SyncContacts(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncContactsRequest, SyncContactsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[1], IntegrationService_SyncContacts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncContactsRequest, SyncContactsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncContactsClient = grpc.ClientStreamingClient[SyncContactsRequest, SyncContactsResponse]

func (c *integrationServiceClient) SyncMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncMessagesRequest, SyncMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[2], IntegrationService_SyncMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncMessagesRequest, SyncMessagesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncMessagesClient = grpc.ClientStreamingClient[SyncMessagesRequest, SyncMessagesResponse]

func (c *integrationServiceClient) ProcessMessage(ctx context.Context, in *ProcessMessageRequest, opts ...grpc.CallOption) (*ProcessMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessMessageResponse)
	err := c.cc.Invoke(ctx, IntegrationService_ProcessMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateConversationState(ctx context.Context, in *UpdateConversationStateRequest, opts ...grpc.CallOption) (*UpdateConversationStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationStateResponse)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateConversationState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) CreateUserIntegration(ctx context.Context, in *CreateUserIntegrationRequest, opts ...grpc.CallOption) (*CreateUserIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_CreateUserIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility.
//
// Integration service handles platform-agnostic messaging integration
type IntegrationServiceServer interface {
	// Connection Management
	UpdateConnectionStatus(context.Context, *UpdateConnectionStatusRequest) (*UpdateConnectionStatusResponse, error)
	// Bulk Synchronization (with streaming for large datasets)
	SyncConversations(grpc.ClientStreamingServer[SyncConversationsRequest, SyncConversationsResponse]) error
	SyncContacts(grpc.ClientStreamingServer[SyncContactsRequest, SyncContactsResponse]) error
	SyncMessages(grpc.ClientStreamingServer[SyncMessagesRequest, SyncMessagesResponse]) error
	// Real-time Events
	ProcessMessage(context.Context, *ProcessMessageRequest) (*ProcessMessageResponse, error)
	UpdateConversationState(context.Context, *UpdateConversationStateRequest) (*UpdateConversationStateResponse, error)
	// Integration Management
	CreateUserIntegration(context.Context, *CreateUserIntegrationRequest) (*CreateUserIntegrationResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationServiceServer struct{}

func (UnimplementedIntegrationServiceServer) UpdateConnectionStatus(context.Context, *UpdateConnectionStatusRequest) (*UpdateConnectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionStatus not implemented")
}
func (UnimplementedIntegrationServiceServer) SyncConversations(grpc.ClientStreamingServer[SyncConversationsRequest, SyncConversationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncConversations not implemented")
}
func (UnimplementedIntegrationServiceServer) SyncContacts(grpc.ClientStreamingServer[SyncContactsRequest, SyncContactsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncContacts not implemented")
}
func (UnimplementedIntegrationServiceServer) SyncMessages(grpc.ClientStreamingServer[SyncMessagesRequest, SyncMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncMessages not implemented")
}
func (UnimplementedIntegrationServiceServer) ProcessMessage(context.Context, *ProcessMessageRequest) (*ProcessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessage not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateConversationState(context.Context, *UpdateConversationStateRequest) (*UpdateConversationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationState not implemented")
}
func (UnimplementedIntegrationServiceServer) CreateUserIntegration(context.Context, *CreateUserIntegrationRequest) (*CreateUserIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}
func (UnimplementedIntegrationServiceServer) testEmbeddedByValue()                            {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_UpdateConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateConnectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateConnectionStatus(ctx, req.(*UpdateConnectionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_SyncConversations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntegrationServiceServer).SyncConversations(&grpc.GenericServerStream[SyncConversationsRequest, SyncConversationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncConversationsServer = grpc.ClientStreamingServer[SyncConversationsRequest, SyncConversationsResponse]

func _IntegrationService_SyncContacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntegrationServiceServer).SyncContacts(&grpc.GenericServerStream[SyncContactsRequest, SyncContactsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncContactsServer = grpc.ClientStreamingServer[SyncContactsRequest, SyncContactsResponse]

func _IntegrationService_SyncMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntegrationServiceServer).SyncMessages(&grpc.GenericServerStream[SyncMessagesRequest, SyncMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrationService_SyncMessagesServer = grpc.ClientStreamingServer[SyncMessagesRequest, SyncMessagesResponse]

func _IntegrationService_ProcessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).ProcessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_ProcessMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).ProcessMessage(ctx, req.(*ProcessMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateConversationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateConversationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateConversationState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateConversationState(ctx, req.(*UpdateConversationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_CreateUserIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).CreateUserIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_CreateUserIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).CreateUserIntegration(ctx, req.(*CreateUserIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tennex.integration.v1.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConnectionStatus",
			Handler:    _IntegrationService_UpdateConnectionStatus_Handler,
		},
		{
			MethodName: "ProcessMessage",
			Handler:    _IntegrationService_ProcessMessage_Handler,
		},
		{
			MethodName: "UpdateConversationState",
			Handler:    _IntegrationService_UpdateConversationState_Handler,
		},
		{
			MethodName: "CreateUserIntegration",
			Handler:    _IntegrationService_CreateUserIntegration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncConversations",
			Handler:       _IntegrationService_SyncConversations_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncContacts",
			Handler:       _IntegrationService_SyncContacts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncMessages",
			Handler:       _IntegrationService_SyncMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/integration.proto",
}
