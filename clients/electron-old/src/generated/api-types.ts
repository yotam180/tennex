/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health check */
    get: operations["getHealth"];
  };
  "/outbox": {
    /** Send a message (queue for delivery) */
    post: operations["createOutboxMessage"];
  };
  "/sync": {
    /** Sync events since a sequence number */
    get: operations["syncEvents"];
  };
  "/qr": {
    /** Get QR code for WhatsApp pairing */
    get: operations["getQRCode"];
  };
  "/accounts": {
    /** List all accounts */
    get: operations["listAccounts"];
  };
  "/accounts/{account_id}": {
    /** Get account details */
    get: operations["getAccount"];
  };
  "/auth/register": {
    /** Register a new user */
    post: operations["registerUser"];
  };
  "/auth/login": {
    /** Login user */
    post: operations["loginUser"];
  };
  "/auth/me": {
    /** Get current user information */
    get: operations["getCurrentUser"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponse: {
      /** @example ok */
      status: string;
      /** Format: date-time */
      timestamp: string;
      /** @example 1.0.0 */
      version?: string;
    };
    SendMessageRequest: {
      /**
       * Format: uuid
       * @description Client-provided UUID for idempotency
       */
      client_msg_uuid: string;
      /** @description Account sending the message */
      account_id: string;
      /** @description Conversation/chat identifier */
      convo_id: string;
      /**
       * @description Type of message content
       * @enum {string}
       */
      message_type: "text" | "image" | "audio" | "video" | "document";
      /** @description Message content (varies by type) */
      content: Record<string, never>;
      /**
       * Format: uuid
       * @description Optional - reply to this message ID
       */
      reply_to?: string;
    };
    SendMessageResponse: {
      /**
       * Format: int64
       * @description Server-assigned sequence number
       */
      server_msg_id: number;
      /**
       * @description Current message status
       * @enum {string}
       */
      status: "queued" | "sending";
      /**
       * Format: uuid
       * @description Echo of client UUID
       */
      client_msg_uuid: string;
    };
    SyncResponse: {
      events: components["schemas"]["Event"][];
      /**
       * Format: int64
       * @description Next sequence number for pagination
       */
      next_seq: number;
      /** @description Whether more events are available */
      has_more: boolean;
    };
    Event: {
      /**
       * Format: int64
       * @description Sequence number for ordering
       */
      seq: number;
      /**
       * Format: uuid
       * @description Unique event identifier
       */
      id: string;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      type: "msg_in" | "msg_out_pending" | "msg_out_sent" | "msg_delivery" | "presence" | "contact_update" | "history_sync";
      account_id: string;
      device_id?: string;
      convo_id: string;
      /** @description WhatsApp message identifier */
      wa_message_id?: string;
      /** @description WhatsApp JID of sender */
      sender_jid?: string;
      /** @description Event-specific data */
      payload: Record<string, never>;
      /** @description Reference to media attachments */
      attachment_ref?: Record<string, never>;
    };
    QRResponse: {
      /**
       * Format: byte
       * @description Base64-encoded PNG image
       */
      qr_code_png: string;
      /** @description Session identifier for this pairing attempt */
      pairing_session_id: string;
      /**
       * Format: date-time
       * @description When this QR code expires
       */
      expires_at?: string;
    };
    Account: {
      id: string;
      /** @description WhatsApp JID */
      wa_jid?: string;
      display_name?: string;
      avatar_url?: string;
      /** @enum {string} */
      status: "connected" | "disconnected" | "connecting" | "error";
      /** Format: date-time */
      last_seen?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    AccountsResponse: {
      accounts: components["schemas"]["Account"][];
      /** @description Total number of accounts */
      total: number;
    };
    ErrorResponse: {
      /** @description Error message */
      error: string;
      /** @description Error code */
      code?: string;
      /** @description Additional error details */
      details?: Record<string, never>;
      /** Format: date-time */
      timestamp: string;
    };
    RegisterRequest: {
      /** @description Unique username (alphanumeric and underscore only) */
      username: string;
      /** @description Password (minimum 8 characters) */
      password: string;
      /**
       * Format: email
       * @description User email address
       */
      email: string;
      /** @description Optional full name */
      full_name?: string;
    };
    LoginRequest: {
      /** @description Username or email */
      username: string;
      /** @description User password */
      password: string;
    };
    AuthResponse: {
      user: components["schemas"]["User"];
      /** @description JWT access token */
      token: string;
      /**
       * Format: date-time
       * @description Token expiration time
       */
      expires_at: string;
    };
    User: {
      /**
       * Format: uuid
       * @description Unique user identifier
       */
      id: string;
      /** @description Username */
      username: string;
      /**
       * Format: email
       * @description User email
       */
      email: string;
      /** @description Full name */
      full_name?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Health check */
  getHealth: {
    responses: {
      /** @description Service is healthy */
      200: {
        content: {
          "application/json": components["schemas"]["HealthResponse"];
        };
      };
    };
  };
  /** Send a message (queue for delivery) */
  createOutboxMessage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendMessageRequest"];
      };
    };
    responses: {
      /** @description Message queued successfully */
      201: {
        content: {
          "application/json": components["schemas"]["SendMessageResponse"];
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Sync events since a sequence number */
  syncEvents: {
    parameters: {
      query: {
        /** @description Account identifier */
        account_id: string;
        /** @description Sequence number to sync from */
        since?: number;
        /** @description Maximum number of events to return */
        limit?: number;
      };
    };
    responses: {
      /** @description Events retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["SyncResponse"];
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get QR code for WhatsApp pairing */
  getQRCode: {
    parameters: {
      query: {
        /** @description Account identifier for pairing */
        account_id: string;
      };
    };
    responses: {
      /** @description QR code generated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["QRResponse"];
        };
      };
      /** @description Invalid request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Failed to generate QR code */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List all accounts */
  listAccounts: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Accounts retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AccountsResponse"];
        };
      };
    };
  };
  /** Get account details */
  getAccount: {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** @description Account details */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** @description Account not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Register a new user */
  registerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Invalid request or user already exists */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Login user */
  loginUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Invalid credentials */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get current user information */
  getCurrentUser: {
    responses: {
      /** @description Current user information */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
