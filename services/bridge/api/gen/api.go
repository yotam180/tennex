// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ConnectionPlatform.
const (
	Discord  ConnectionPlatform = "discord"
	Telegram ConnectionPlatform = "telegram"
	Whatsapp ConnectionPlatform = "whatsapp"
)

// Connection defines model for Connection.
type Connection struct {
	// AvatarUrl Profile picture URL
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Connected Connection status
	Connected bool `json:"connected"`

	// ConnectedAt When connection was established
	ConnectedAt *time.Time `json:"connected_at,omitempty"`

	// DisplayName Display name on the platform
	DisplayName *string `json:"display_name,omitempty"`

	// LastSeen Last activity timestamp
	LastSeen *time.Time `json:"last_seen,omitempty"`

	// Metadata Platform-specific metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Platform Messaging platform name
	Platform ConnectionPlatform `json:"platform"`

	// PlatformUserId User identifier on the messaging platform
	PlatformUserId *string `json:"platform_user_id,omitempty"`

	// UserId User ID this connection belongs to
	UserId openapi_types.UUID `json:"user_id"`
}

// ConnectionPlatform Messaging platform name
type ConnectionPlatform string

// ConnectionsResponse defines model for ConnectionsResponse.
type ConnectionsResponse struct {
	Connections []Connection `json:"connections"`

	// Total Total number of connections
	Total *int `json:"total,omitempty"`

	// UserId User ID these connections belong to
	UserId openapi_types.UUID `json:"user_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Version   *string   `json:"version,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Message   string     `json:"message"`
	Success   bool       `json:"success"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// WhatsAppConnectResponse defines model for WhatsAppConnectResponse.
type WhatsAppConnectResponse struct {
	// ExpiresAt When the QR code expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Instructions Human-readable instructions
	Instructions *string `json:"instructions,omitempty"`

	// QrCode QR code data for WhatsApp connection
	QrCode string `json:"qr_code"`

	// SessionId Unique session identifier for this connection attempt
	SessionId openapi_types.UUID `json:"session_id"`
}

// WhatsAppStatusResponse defines model for WhatsAppStatusResponse.
type WhatsAppStatusResponse struct {
	// AvatarUrl WhatsApp profile picture URL
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Connected Whether WhatsApp is connected
	Connected bool `json:"connected"`

	// ConnectedAt When the connection was established
	ConnectedAt *time.Time `json:"connected_at,omitempty"`

	// DisplayName WhatsApp display name
	DisplayName *string `json:"display_name,omitempty"`

	// LastSeen Last activity timestamp
	LastSeen *time.Time `json:"last_seen,omitempty"`

	// UserId User ID this connection belongs to
	UserId openapi_types.UUID `json:"user_id"`

	// WhatsappJid WhatsApp JID if connected
	WhatsappJid *string `json:"whatsapp_jid,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all user's messaging platform connections
	// (GET /connections)
	ListConnections(w http.ResponseWriter, r *http.Request)
	// Health check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Connect WhatsApp account
	// (POST /whatsapp/connect)
	ConnectWhatsApp(w http.ResponseWriter, r *http.Request)
	// Disconnect WhatsApp account
	// (POST /whatsapp/disconnect)
	DisconnectWhatsApp(w http.ResponseWriter, r *http.Request)
	// Get WhatsApp connection status
	// (GET /whatsapp/status)
	GetWhatsAppStatus(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all user's messaging platform connections
// (GET /connections)
func (_ Unimplemented) ListConnections(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Connect WhatsApp account
// (POST /whatsapp/connect)
func (_ Unimplemented) ConnectWhatsApp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disconnect WhatsApp account
// (POST /whatsapp/disconnect)
func (_ Unimplemented) DisconnectWhatsApp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get WhatsApp connection status
// (GET /whatsapp/status)
func (_ Unimplemented) GetWhatsAppStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListConnections operation middleware
func (siw *ServerInterfaceWrapper) ListConnections(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListConnections(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConnectWhatsApp operation middleware
func (siw *ServerInterfaceWrapper) ConnectWhatsApp(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectWhatsApp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DisconnectWhatsApp operation middleware
func (siw *ServerInterfaceWrapper) DisconnectWhatsApp(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisconnectWhatsApp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWhatsAppStatus operation middleware
func (siw *ServerInterfaceWrapper) GetWhatsAppStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWhatsAppStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/connections", wrapper.ListConnections)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/whatsapp/connect", wrapper.ConnectWhatsApp)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/whatsapp/disconnect", wrapper.DisconnectWhatsApp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/whatsapp/status", wrapper.GetWhatsAppStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYW3MTNxT+Kxq1M33Z2Oba1k8EUiAMnQIJk3YyHo+sPfYKtJKQzgZMxv+9I+19LTsu",
	"EMpbNpI+nfOd2ydfU65zoxUodHR6TR3PIGfhzydaKeAotPJfxmoDFgWENXbFkNl5YaX/SsFxK0y5lb6y",
	"eikkECM4FhbI2zcvaUJxbYBOqUMr1IpuEspLeEi3EdqbiUOGhWvPL7SWwFQPYM5wG+MiA0V4C/SROQIO",
	"2UIKl0FKE7rUNvcnacoQjlDkEDMzFc5Itp4rlsP2LSflKvGrRCuCGRAjGXrsGJpkDucOQG1DvWQOCeMo",
	"rgSuiTfHIcvNwYbmgCxlyEJ40lR4WCZfdcKGtoBkGKzK2CNngIul4KTBae7Qi3fA0d/RuLZl/Z/gHFsJ",
	"tWrcD5zQhIIqcjq9pB8zho4Z7xCChJVlnqFUOK5tSmcRj2qkeeHAzkUkUd46sESkoFAsBdg6AvmWMTHC",
	"9qOenhDMhOum0AKkVitHUHeDUhQi3YbfJNTCh0JYn9+XtGNHm/etCbMI120RuDfgjFYOtuuwtS58CoQ8",
	"/PGzhSWd0p/GbXWPq9Ied+p609zLrGXr8K2RRYr63P+bqCJfeJqXpHtxAyIUwgrsgeSCgy5MRe+XsNs3",
	"Zh+pf1ir7T4600iRh0MkrMUaBCAT0m0fO26KkEBAqHdG7Aobdt1cpnP08rZNTK8P6hMD5sp7uzgx1p4D",
	"k5jtpq1q0tNrCp9YbmQ4/f6b2JvQK7CumkEt+p3RZDS50bt2eOx176zgHNyeKqsD0DPhLwOWhb7ga0wC",
	"QkpcibQspFzHfKnWe0BlV94eb18b2vqupDE/5vuF78rHxlRNYTcH8MkIC273rPWN9/WbUCak2nzw7BLK",
	"oS3aPtaHf17kTB1ZYClbSCC9zUknImecqbJp13Z8FJiR2kU/Hda6sMRkWkXN+GDn8Q5Q4/m5SJbatpht",
	"6+mZcvfR49f82dPP//w9Go2imQDOZ3W8RSrxoQBSbenON3/1cCoxRMgN/uemWTvbs2VfipyFatqdIfs0",
	"YcOX+WpxeJEBZtAJQUsHpF8qFH3y3rpYbCxOO6rxO6vEWxU9SSPy5u9EuoeAF6cnRCx7Yev09rv37j94",
	"+Otvv08euVENOFKAh+qAG6RVqD5eWIHrMy+JyuxdALNgjwvM2q+ntbsvLs59nYTdPrfCamtOhmjoZhMa",
	"2VJXugwZD9lW5gI9B6XgEzkHlpeqoaeeC4niqFHOrX5dWJGufCuwV4KHgAqUHbjH5frxq1PamZTVeNwk",
	"VBtQzAg6pfdGd8LENAyz4PB4oB1XEMzV9Vg7TX26CYdPeurKVvUfztydTGpvQYXjzBgpeAAYv3Pl2C6F",
	"5+GytO0xgdNBAQiHQwG6Sej9yZ1vZklfJEZseKtYgZm24jOkZT4Vec7sujaPSUl8/v3iIk+RoXRmK+dz",
	"t8vyzGOOs6C6dobmGWCpy24zKAPlF+HirExN34VLg9e9CqPTy1mXnxKQ8Az4+473Z2uHkFeO1zVfZ2gY",
	"NdpFOKhIq/vKbTKxSyhFKKnVwi6h8P+ma0IffENabrz8VCFY/wbyPQxs+RQaFE3FaUsW41wXCjsJ0oR4",
	"kCLh94MbsuSk2fM9EmX4mohw0hUCzczqPx5+oJbW0vclAWrfhru6WF9ffo8aHijZfRHiWz9F/kCReQZI",
	"9lgaD06/OfeFz+Vs47t1qFQXVgfDV3MmSQpXILXJQWFV1V5vedkflNB0PJZ+X6YdTh9OJvfoZrb5NwAA",
	"//+5DxtdaBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
