// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AccountStatus.
const (
	Connected    AccountStatus = "connected"
	Connecting   AccountStatus = "connecting"
	Disconnected AccountStatus = "disconnected"
	Error        AccountStatus = "error"
)

// Defines values for EventType.
const (
	ContactUpdate EventType = "contact_update"
	HistorySync   EventType = "history_sync"
	MsgDelivery   EventType = "msg_delivery"
	MsgIn         EventType = "msg_in"
	MsgOutPending EventType = "msg_out_pending"
	MsgOutSent    EventType = "msg_out_sent"
	Presence      EventType = "presence"
)

// Defines values for SendMessageRequestMessageType.
const (
	Audio    SendMessageRequestMessageType = "audio"
	Document SendMessageRequestMessageType = "document"
	Image    SendMessageRequestMessageType = "image"
	Text     SendMessageRequestMessageType = "text"
	Video    SendMessageRequestMessageType = "video"
)

// Defines values for SendMessageResponseStatus.
const (
	Queued  SendMessageResponseStatus = "queued"
	Sending SendMessageResponseStatus = "sending"
)

// Account defines model for Account.
type Account struct {
	AvatarUrl   *string       `json:"avatar_url,omitempty"`
	CreatedAt   time.Time     `json:"created_at"`
	DisplayName *string       `json:"display_name,omitempty"`
	Id          string        `json:"id"`
	LastSeen    *time.Time    `json:"last_seen,omitempty"`
	Status      AccountStatus `json:"status"`
	UpdatedAt   time.Time     `json:"updated_at"`

	// WaJid WhatsApp JID
	WaJid *string `json:"wa_jid,omitempty"`
}

// AccountStatus defines model for Account.Status.
type AccountStatus string

// AccountsResponse defines model for AccountsResponse.
type AccountsResponse struct {
	Accounts []Account `json:"accounts"`

	// Total Total number of accounts
	Total int `json:"total"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error     string    `json:"error"`
	Timestamp time.Time `json:"timestamp"`
}

// Event defines model for Event.
type Event struct {
	AccountId string `json:"account_id"`

	// AttachmentRef Reference to media attachments
	AttachmentRef *map[string]interface{} `json:"attachment_ref,omitempty"`
	ConvoId       string                  `json:"convo_id"`
	DeviceId      *string                 `json:"device_id,omitempty"`

	// Id Unique event identifier
	Id openapi_types.UUID `json:"id"`

	// Payload Event-specific data
	Payload map[string]interface{} `json:"payload"`

	// SenderJid WhatsApp JID of sender
	SenderJid *string `json:"sender_jid,omitempty"`

	// Seq Sequence number for ordering
	Seq       int64     `json:"seq"`
	Timestamp time.Time `json:"timestamp"`
	Type      EventType `json:"type"`

	// WaMessageId WhatsApp message identifier
	WaMessageId *string `json:"wa_message_id,omitempty"`
}

// EventType defines model for Event.Type.
type EventType string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Version   *string   `json:"version,omitempty"`
}

// QRResponse defines model for QRResponse.
type QRResponse struct {
	// ExpiresAt When this QR code expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// PairingSessionId Session identifier for this pairing attempt
	PairingSessionId string `json:"pairing_session_id"`

	// QrCodePng Base64-encoded PNG image
	QrCodePng []byte `json:"qr_code_png"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	// AccountId Account sending the message
	AccountId string `json:"account_id"`

	// ClientMsgUuid Client-provided UUID for idempotency
	ClientMsgUuid openapi_types.UUID `json:"client_msg_uuid"`

	// Content Message content (varies by type)
	Content map[string]interface{} `json:"content"`

	// ConvoId Conversation/chat identifier
	ConvoId string `json:"convo_id"`

	// MessageType Type of message content
	MessageType SendMessageRequestMessageType `json:"message_type"`

	// ReplyTo Optional - reply to this message ID
	ReplyTo *openapi_types.UUID `json:"reply_to,omitempty"`
}

// SendMessageRequestMessageType Type of message content
type SendMessageRequestMessageType string

// SendMessageResponse defines model for SendMessageResponse.
type SendMessageResponse struct {
	// ClientMsgUuid Echo of client UUID
	ClientMsgUuid openapi_types.UUID `json:"client_msg_uuid"`

	// ServerMsgId Server-assigned sequence number
	ServerMsgId int64 `json:"server_msg_id"`

	// Status Current message status
	Status SendMessageResponseStatus `json:"status"`
}

// SendMessageResponseStatus Current message status
type SendMessageResponseStatus string

// SyncResponse defines model for SyncResponse.
type SyncResponse struct {
	Events []Event `json:"events"`

	// HasMore Whether more events are available
	HasMore bool `json:"has_more"`

	// NextSeq Next sequence number for pagination
	NextSeq int64 `json:"next_seq"`
}

// ListAccountsParams defines parameters for ListAccounts.
type ListAccountsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetQRCodeParams defines parameters for GetQRCode.
type GetQRCodeParams struct {
	// AccountId Account identifier for pairing
	AccountId string `form:"account_id" json:"account_id"`
}

// SyncEventsParams defines parameters for SyncEvents.
type SyncEventsParams struct {
	// AccountId Account identifier
	AccountId string `form:"account_id" json:"account_id"`

	// Since Sequence number to sync from
	Since *int64 `form:"since,omitempty" json:"since,omitempty"`

	// Limit Maximum number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateOutboxMessageJSONRequestBody defines body for CreateOutboxMessage for application/json ContentType.
type CreateOutboxMessageJSONRequestBody = SendMessageRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all accounts
	// (GET /accounts)
	ListAccounts(w http.ResponseWriter, r *http.Request, params ListAccountsParams)
	// Get account details
	// (GET /accounts/{account_id})
	GetAccount(w http.ResponseWriter, r *http.Request, accountId string)
	// Health check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Send a message (queue for delivery)
	// (POST /outbox)
	CreateOutboxMessage(w http.ResponseWriter, r *http.Request)
	// Get QR code for WhatsApp pairing
	// (GET /qr)
	GetQRCode(w http.ResponseWriter, r *http.Request, params GetQRCodeParams)
	// Sync events since a sequence number
	// (GET /sync)
	SyncEvents(w http.ResponseWriter, r *http.Request, params SyncEventsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all accounts
// (GET /accounts)
func (_ Unimplemented) ListAccounts(w http.ResponseWriter, r *http.Request, params ListAccountsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get account details
// (GET /accounts/{account_id})
func (_ Unimplemented) GetAccount(w http.ResponseWriter, r *http.Request, accountId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a message (queue for delivery)
// (POST /outbox)
func (_ Unimplemented) CreateOutboxMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get QR code for WhatsApp pairing
// (GET /qr)
func (_ Unimplemented) GetQRCode(w http.ResponseWriter, r *http.Request, params GetQRCodeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sync events since a sequence number
// (GET /sync)
func (_ Unimplemented) SyncEvents(w http.ResponseWriter, r *http.Request, params SyncEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListAccounts(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAccountsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAccounts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", chi.URLParam(r, "account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccount(w, r, accountId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateOutboxMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateOutboxMessage(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOutboxMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetQRCode operation middleware
func (siw *ServerInterfaceWrapper) GetQRCode(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQRCodeParams

	// ------------- Required query parameter "account_id" -------------

	if paramValue := r.URL.Query().Get("account_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "account_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "account_id", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQRCode(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SyncEvents operation middleware
func (siw *ServerInterfaceWrapper) SyncEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SyncEventsParams

	// ------------- Required query parameter "account_id" -------------

	if paramValue := r.URL.Query().Get("account_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "account_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "account_id", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_id", Err: err})
		return
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", r.URL.Query(), &params.Since)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "since", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SyncEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/accounts", wrapper.ListAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/accounts/{account_id}", wrapper.GetAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/outbox", wrapper.CreateOutboxMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/qr", wrapper.GetQRCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sync", wrapper.SyncEvents)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
